// Code generated by counterfeiter. DO NOT EDIT.
package efsfakes

import (
	"sync"

	"code.cloudfoundry.org/efsbroker/efsbroker"
	"github.com/aws/aws-sdk-go/service/efs"
)

type FakeEFSService struct {
	CreateFileSystemStub        func(*efs.CreateFileSystemInput) (*efs.FileSystemDescription, error)
	createFileSystemMutex       sync.RWMutex
	createFileSystemArgsForCall []struct {
		arg1 *efs.CreateFileSystemInput
	}
	createFileSystemReturns struct {
		result1 *efs.FileSystemDescription
		result2 error
	}
	createFileSystemReturnsOnCall map[int]struct {
		result1 *efs.FileSystemDescription
		result2 error
	}
	DeleteFileSystemStub        func(*efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error)
	deleteFileSystemMutex       sync.RWMutex
	deleteFileSystemArgsForCall []struct {
		arg1 *efs.DeleteFileSystemInput
	}
	deleteFileSystemReturns struct {
		result1 *efs.DeleteFileSystemOutput
		result2 error
	}
	deleteFileSystemReturnsOnCall map[int]struct {
		result1 *efs.DeleteFileSystemOutput
		result2 error
	}
	DescribeFileSystemsStub        func(*efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error)
	describeFileSystemsMutex       sync.RWMutex
	describeFileSystemsArgsForCall []struct {
		arg1 *efs.DescribeFileSystemsInput
	}
	describeFileSystemsReturns struct {
		result1 *efs.DescribeFileSystemsOutput
		result2 error
	}
	describeFileSystemsReturnsOnCall map[int]struct {
		result1 *efs.DescribeFileSystemsOutput
		result2 error
	}
	CreateMountTargetStub        func(*efs.CreateMountTargetInput) (*efs.MountTargetDescription, error)
	createMountTargetMutex       sync.RWMutex
	createMountTargetArgsForCall []struct {
		arg1 *efs.CreateMountTargetInput
	}
	createMountTargetReturns struct {
		result1 *efs.MountTargetDescription
		result2 error
	}
	createMountTargetReturnsOnCall map[int]struct {
		result1 *efs.MountTargetDescription
		result2 error
	}
	DeleteMountTargetStub        func(*efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error)
	deleteMountTargetMutex       sync.RWMutex
	deleteMountTargetArgsForCall []struct {
		arg1 *efs.DeleteMountTargetInput
	}
	deleteMountTargetReturns struct {
		result1 *efs.DeleteMountTargetOutput
		result2 error
	}
	deleteMountTargetReturnsOnCall map[int]struct {
		result1 *efs.DeleteMountTargetOutput
		result2 error
	}
	DescribeMountTargetsStub        func(*efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error)
	describeMountTargetsMutex       sync.RWMutex
	describeMountTargetsArgsForCall []struct {
		arg1 *efs.DescribeMountTargetsInput
	}
	describeMountTargetsReturns struct {
		result1 *efs.DescribeMountTargetsOutput
		result2 error
	}
	describeMountTargetsReturnsOnCall map[int]struct {
		result1 *efs.DescribeMountTargetsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEFSService) CreateFileSystem(arg1 *efs.CreateFileSystemInput) (*efs.FileSystemDescription, error) {
	fake.createFileSystemMutex.Lock()
	ret, specificReturn := fake.createFileSystemReturnsOnCall[len(fake.createFileSystemArgsForCall)]
	fake.createFileSystemArgsForCall = append(fake.createFileSystemArgsForCall, struct {
		arg1 *efs.CreateFileSystemInput
	}{arg1})
	fake.recordInvocation("CreateFileSystem", []interface{}{arg1})
	fake.createFileSystemMutex.Unlock()
	if fake.CreateFileSystemStub != nil {
		return fake.CreateFileSystemStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createFileSystemReturns.result1, fake.createFileSystemReturns.result2
}

func (fake *FakeEFSService) CreateFileSystemCallCount() int {
	fake.createFileSystemMutex.RLock()
	defer fake.createFileSystemMutex.RUnlock()
	return len(fake.createFileSystemArgsForCall)
}

func (fake *FakeEFSService) CreateFileSystemArgsForCall(i int) *efs.CreateFileSystemInput {
	fake.createFileSystemMutex.RLock()
	defer fake.createFileSystemMutex.RUnlock()
	return fake.createFileSystemArgsForCall[i].arg1
}

func (fake *FakeEFSService) CreateFileSystemReturns(result1 *efs.FileSystemDescription, result2 error) {
	fake.CreateFileSystemStub = nil
	fake.createFileSystemReturns = struct {
		result1 *efs.FileSystemDescription
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) CreateFileSystemReturnsOnCall(i int, result1 *efs.FileSystemDescription, result2 error) {
	fake.CreateFileSystemStub = nil
	if fake.createFileSystemReturnsOnCall == nil {
		fake.createFileSystemReturnsOnCall = make(map[int]struct {
			result1 *efs.FileSystemDescription
			result2 error
		})
	}
	fake.createFileSystemReturnsOnCall[i] = struct {
		result1 *efs.FileSystemDescription
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DeleteFileSystem(arg1 *efs.DeleteFileSystemInput) (*efs.DeleteFileSystemOutput, error) {
	fake.deleteFileSystemMutex.Lock()
	ret, specificReturn := fake.deleteFileSystemReturnsOnCall[len(fake.deleteFileSystemArgsForCall)]
	fake.deleteFileSystemArgsForCall = append(fake.deleteFileSystemArgsForCall, struct {
		arg1 *efs.DeleteFileSystemInput
	}{arg1})
	fake.recordInvocation("DeleteFileSystem", []interface{}{arg1})
	fake.deleteFileSystemMutex.Unlock()
	if fake.DeleteFileSystemStub != nil {
		return fake.DeleteFileSystemStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteFileSystemReturns.result1, fake.deleteFileSystemReturns.result2
}

func (fake *FakeEFSService) DeleteFileSystemCallCount() int {
	fake.deleteFileSystemMutex.RLock()
	defer fake.deleteFileSystemMutex.RUnlock()
	return len(fake.deleteFileSystemArgsForCall)
}

func (fake *FakeEFSService) DeleteFileSystemArgsForCall(i int) *efs.DeleteFileSystemInput {
	fake.deleteFileSystemMutex.RLock()
	defer fake.deleteFileSystemMutex.RUnlock()
	return fake.deleteFileSystemArgsForCall[i].arg1
}

func (fake *FakeEFSService) DeleteFileSystemReturns(result1 *efs.DeleteFileSystemOutput, result2 error) {
	fake.DeleteFileSystemStub = nil
	fake.deleteFileSystemReturns = struct {
		result1 *efs.DeleteFileSystemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DeleteFileSystemReturnsOnCall(i int, result1 *efs.DeleteFileSystemOutput, result2 error) {
	fake.DeleteFileSystemStub = nil
	if fake.deleteFileSystemReturnsOnCall == nil {
		fake.deleteFileSystemReturnsOnCall = make(map[int]struct {
			result1 *efs.DeleteFileSystemOutput
			result2 error
		})
	}
	fake.deleteFileSystemReturnsOnCall[i] = struct {
		result1 *efs.DeleteFileSystemOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DescribeFileSystems(arg1 *efs.DescribeFileSystemsInput) (*efs.DescribeFileSystemsOutput, error) {
	fake.describeFileSystemsMutex.Lock()
	ret, specificReturn := fake.describeFileSystemsReturnsOnCall[len(fake.describeFileSystemsArgsForCall)]
	fake.describeFileSystemsArgsForCall = append(fake.describeFileSystemsArgsForCall, struct {
		arg1 *efs.DescribeFileSystemsInput
	}{arg1})
	fake.recordInvocation("DescribeFileSystems", []interface{}{arg1})
	fake.describeFileSystemsMutex.Unlock()
	if fake.DescribeFileSystemsStub != nil {
		return fake.DescribeFileSystemsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeFileSystemsReturns.result1, fake.describeFileSystemsReturns.result2
}

func (fake *FakeEFSService) DescribeFileSystemsCallCount() int {
	fake.describeFileSystemsMutex.RLock()
	defer fake.describeFileSystemsMutex.RUnlock()
	return len(fake.describeFileSystemsArgsForCall)
}

func (fake *FakeEFSService) DescribeFileSystemsArgsForCall(i int) *efs.DescribeFileSystemsInput {
	fake.describeFileSystemsMutex.RLock()
	defer fake.describeFileSystemsMutex.RUnlock()
	return fake.describeFileSystemsArgsForCall[i].arg1
}

func (fake *FakeEFSService) DescribeFileSystemsReturns(result1 *efs.DescribeFileSystemsOutput, result2 error) {
	fake.DescribeFileSystemsStub = nil
	fake.describeFileSystemsReturns = struct {
		result1 *efs.DescribeFileSystemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DescribeFileSystemsReturnsOnCall(i int, result1 *efs.DescribeFileSystemsOutput, result2 error) {
	fake.DescribeFileSystemsStub = nil
	if fake.describeFileSystemsReturnsOnCall == nil {
		fake.describeFileSystemsReturnsOnCall = make(map[int]struct {
			result1 *efs.DescribeFileSystemsOutput
			result2 error
		})
	}
	fake.describeFileSystemsReturnsOnCall[i] = struct {
		result1 *efs.DescribeFileSystemsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) CreateMountTarget(arg1 *efs.CreateMountTargetInput) (*efs.MountTargetDescription, error) {
	fake.createMountTargetMutex.Lock()
	ret, specificReturn := fake.createMountTargetReturnsOnCall[len(fake.createMountTargetArgsForCall)]
	fake.createMountTargetArgsForCall = append(fake.createMountTargetArgsForCall, struct {
		arg1 *efs.CreateMountTargetInput
	}{arg1})
	fake.recordInvocation("CreateMountTarget", []interface{}{arg1})
	fake.createMountTargetMutex.Unlock()
	if fake.CreateMountTargetStub != nil {
		return fake.CreateMountTargetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createMountTargetReturns.result1, fake.createMountTargetReturns.result2
}

func (fake *FakeEFSService) CreateMountTargetCallCount() int {
	fake.createMountTargetMutex.RLock()
	defer fake.createMountTargetMutex.RUnlock()
	return len(fake.createMountTargetArgsForCall)
}

func (fake *FakeEFSService) CreateMountTargetArgsForCall(i int) *efs.CreateMountTargetInput {
	fake.createMountTargetMutex.RLock()
	defer fake.createMountTargetMutex.RUnlock()
	return fake.createMountTargetArgsForCall[i].arg1
}

func (fake *FakeEFSService) CreateMountTargetReturns(result1 *efs.MountTargetDescription, result2 error) {
	fake.CreateMountTargetStub = nil
	fake.createMountTargetReturns = struct {
		result1 *efs.MountTargetDescription
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) CreateMountTargetReturnsOnCall(i int, result1 *efs.MountTargetDescription, result2 error) {
	fake.CreateMountTargetStub = nil
	if fake.createMountTargetReturnsOnCall == nil {
		fake.createMountTargetReturnsOnCall = make(map[int]struct {
			result1 *efs.MountTargetDescription
			result2 error
		})
	}
	fake.createMountTargetReturnsOnCall[i] = struct {
		result1 *efs.MountTargetDescription
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DeleteMountTarget(arg1 *efs.DeleteMountTargetInput) (*efs.DeleteMountTargetOutput, error) {
	fake.deleteMountTargetMutex.Lock()
	ret, specificReturn := fake.deleteMountTargetReturnsOnCall[len(fake.deleteMountTargetArgsForCall)]
	fake.deleteMountTargetArgsForCall = append(fake.deleteMountTargetArgsForCall, struct {
		arg1 *efs.DeleteMountTargetInput
	}{arg1})
	fake.recordInvocation("DeleteMountTarget", []interface{}{arg1})
	fake.deleteMountTargetMutex.Unlock()
	if fake.DeleteMountTargetStub != nil {
		return fake.DeleteMountTargetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteMountTargetReturns.result1, fake.deleteMountTargetReturns.result2
}

func (fake *FakeEFSService) DeleteMountTargetCallCount() int {
	fake.deleteMountTargetMutex.RLock()
	defer fake.deleteMountTargetMutex.RUnlock()
	return len(fake.deleteMountTargetArgsForCall)
}

func (fake *FakeEFSService) DeleteMountTargetArgsForCall(i int) *efs.DeleteMountTargetInput {
	fake.deleteMountTargetMutex.RLock()
	defer fake.deleteMountTargetMutex.RUnlock()
	return fake.deleteMountTargetArgsForCall[i].arg1
}

func (fake *FakeEFSService) DeleteMountTargetReturns(result1 *efs.DeleteMountTargetOutput, result2 error) {
	fake.DeleteMountTargetStub = nil
	fake.deleteMountTargetReturns = struct {
		result1 *efs.DeleteMountTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DeleteMountTargetReturnsOnCall(i int, result1 *efs.DeleteMountTargetOutput, result2 error) {
	fake.DeleteMountTargetStub = nil
	if fake.deleteMountTargetReturnsOnCall == nil {
		fake.deleteMountTargetReturnsOnCall = make(map[int]struct {
			result1 *efs.DeleteMountTargetOutput
			result2 error
		})
	}
	fake.deleteMountTargetReturnsOnCall[i] = struct {
		result1 *efs.DeleteMountTargetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DescribeMountTargets(arg1 *efs.DescribeMountTargetsInput) (*efs.DescribeMountTargetsOutput, error) {
	fake.describeMountTargetsMutex.Lock()
	ret, specificReturn := fake.describeMountTargetsReturnsOnCall[len(fake.describeMountTargetsArgsForCall)]
	fake.describeMountTargetsArgsForCall = append(fake.describeMountTargetsArgsForCall, struct {
		arg1 *efs.DescribeMountTargetsInput
	}{arg1})
	fake.recordInvocation("DescribeMountTargets", []interface{}{arg1})
	fake.describeMountTargetsMutex.Unlock()
	if fake.DescribeMountTargetsStub != nil {
		return fake.DescribeMountTargetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeMountTargetsReturns.result1, fake.describeMountTargetsReturns.result2
}

func (fake *FakeEFSService) DescribeMountTargetsCallCount() int {
	fake.describeMountTargetsMutex.RLock()
	defer fake.describeMountTargetsMutex.RUnlock()
	return len(fake.describeMountTargetsArgsForCall)
}

func (fake *FakeEFSService) DescribeMountTargetsArgsForCall(i int) *efs.DescribeMountTargetsInput {
	fake.describeMountTargetsMutex.RLock()
	defer fake.describeMountTargetsMutex.RUnlock()
	return fake.describeMountTargetsArgsForCall[i].arg1
}

func (fake *FakeEFSService) DescribeMountTargetsReturns(result1 *efs.DescribeMountTargetsOutput, result2 error) {
	fake.DescribeMountTargetsStub = nil
	fake.describeMountTargetsReturns = struct {
		result1 *efs.DescribeMountTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) DescribeMountTargetsReturnsOnCall(i int, result1 *efs.DescribeMountTargetsOutput, result2 error) {
	fake.DescribeMountTargetsStub = nil
	if fake.describeMountTargetsReturnsOnCall == nil {
		fake.describeMountTargetsReturnsOnCall = make(map[int]struct {
			result1 *efs.DescribeMountTargetsOutput
			result2 error
		})
	}
	fake.describeMountTargetsReturnsOnCall[i] = struct {
		result1 *efs.DescribeMountTargetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEFSService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createFileSystemMutex.RLock()
	defer fake.createFileSystemMutex.RUnlock()
	fake.deleteFileSystemMutex.RLock()
	defer fake.deleteFileSystemMutex.RUnlock()
	fake.describeFileSystemsMutex.RLock()
	defer fake.describeFileSystemsMutex.RUnlock()
	fake.createMountTargetMutex.RLock()
	defer fake.createMountTargetMutex.RUnlock()
	fake.deleteMountTargetMutex.RLock()
	defer fake.deleteMountTargetMutex.RUnlock()
	fake.describeMountTargetsMutex.RLock()
	defer fake.describeMountTargetsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEFSService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ efsbroker.EFSService = new(FakeEFSService)
